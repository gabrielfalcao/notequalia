---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  # serviceAccountName: user
  minReadySeconds: 5
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: drone-ci-butler
      app.kubernetes.io/svc: web
  template:
    metadata:
      labels:
        app.kubernetes.io/svc: web
        drone-ci-butler/role: application
    spec:
      volumes:
        - name: yaml-config
          configMap:
            name: config
            items:
              - key: drone-ci-butler.yml
                path: drone-ci-butler.yml

      initContainers:
      - image: "drone-ci-butler:latest"
        imagePullPolicy: IfNotPresent
        name: check-installation
        command: ['drone-ci-butler', 'check']
        envFrom:
          - configMapRef:
              name: env

        volumeMounts:
        - name: yaml-config
          mountPath: /butler/drone-ci-butler.yml
          subPath: drone-ci-butler.yml

      - image: "drone-ci-butler:latest"
        imagePullPolicy: IfNotPresent
        name: check-network-connections
        command: ['drone-ci-butler', 'test-connections']
        envFrom:
          - configMapRef:
              name: env
        volumeMounts:
        - name: yaml-config
          mountPath: /butler/drone-ci-butler.yml
          subPath: drone-ci-butler.yml

      - image: "drone-ci-butler:latest"
        imagePullPolicy: IfNotPresent
        name: run-database-migrations
        command: ['drone-ci-butler', 'upgrade-db']
        envFrom:
          - configMapRef:
              name: env
        volumeMounts:
        - name: yaml-config
          mountPath: /butler/drone-ci-butler.yml
          subPath: drone-ci-butler.yml

      - image: "drone-ci-butler:latest"
        imagePullPolicy: IfNotPresent
        name: create-default-users
        command: ['drone-ci-butler', 'users']
        envFrom:
          - configMapRef:
              name: env
        volumeMounts:
        - name: yaml-config
          mountPath: /butler/drone-ci-butler.yml
          subPath: drone-ci-butler.yml

      containers:
      - image: "drone-ci-butler:latest"
        imagePullPolicy: IfNotPresent
        name: web-application-server
        resources:
          limits:
            memory: 2Gi
          requests:
            memory: 2Gi
        command: ['drone-ci-butler', 'web']
        # # For some reason with gunicorn the github+slack oauth callback are failing so let's use just flask for now
        # # command:
        # #   - 'gunicorn'
        # #   - '--capture-output'
        # #   - '--bind'
        # #   - ':4000'
        # #   - '--worker-class'
        # #   - 'gevent'
        # #   - '--workers'
        # #   - '8'
        # #   - "drone_ci_butler.web.routes:webapp"
        volumeMounts:
        - name: yaml-config
          mountPath: /butler/drone-ci-butler.yml
          subPath: drone-ci-butler.yml
        livenessProbe:
          httpGet:
            path: /health
            port: api
          initialDelaySeconds: 1800
          periodSeconds: 1800
        readinessProbe:
          httpGet:
            path: /health
            port: api
          initialDelaySeconds: 10

        env:
          - name: UPLOAD_FOLDER
            value: /ci-butler-volume/file-uploads

        envFrom:
          - configMapRef:
              name: env

        ports:
        - containerPort: 4000
          name: api
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    drone-ci-butler/role: application
    app.kubernetes.io/svc: web

spec:
  type: NodePort
  ports:
    - port: 4000
      targetPort: 4000
      protocol: TCP
      name: api
  selector:
    app.kubernetes.io/svc: web
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: drone-ci-butler
  labels:
    drone-ci-butler/role: application

spec:
  tls:
  - hosts:
      - drone.ci-butler.news.dev.nyt.net
    secretName: ci-butler-tls
  rules:
  - host: drone.ci-butler.news.dev.nyt.net
    http:
      paths:
      - backend:
          serviceName: drone-ci-butler-web
          servicePort: api
