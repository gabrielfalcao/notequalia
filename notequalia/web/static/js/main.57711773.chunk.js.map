{"version":3,"sources":["ui.tsx","pages/home.tsx","components/Editor.tsx","components/Preview.tsx","pages/NoteManager.tsx","auth.tsx","pages/login.tsx","pages/logout.tsx","App.tsx","serviceWorker.ts","reducers/auth.tsx","reducers/note.tsx","reducers/templates.tsx","history.tsx","reducers/index.tsx","store.tsx","index.tsx"],"names":["ComponentWithStore","Component","connect","state","setUser","user","type","ProfilePage","auth","this","props","Container","fluid","Row","profile","Fragment","Col","md","preferred_username","Card","bg","text","style","width","Header","Body","Title","Text","Form","Control","as","rows","readOnly","value","access_token","refresh_token","id_token","className","scope","Object","keys","map","key","index","Group","controlId","Label","column","sm","to","defaultProps","Editor","markdownContent","setMarkdownContent","theme","id","onChange","e","target","defaultValue","Preview","markdown","mardownFormattedContent","marked","dangerouslySetInnerHTML","__html","DEFAULT_MARKDOWN","NoteManager","note","setState","saveNote","Button","onClick","name","metadata","uri_id","needs_login","Login","login","email","preferred_name","Modal","Dialog","Footer","variant","Logout","PropTypes","func","shape","string","performLogout","logout","AuthenticatedRoute","children","rest","render","location","pathname","from","Navbar","expand","sticky","Brand","Toggle","aria-controls","Collapse","Nav","Link","href","path","exact","Boolean","window","hostname","match","DEFAULT_STATE","action","templates","history","createBrowserHistory","compose","combineReducers","router","connectRouter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","loaded","load","namespace","console","log","createStore","rootReducer","applyMiddleware","save","ReactDOM","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57711773.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n/* import { withRouter } from \"react-router-dom\"\n * */\n\nexport const useDarkMode = () => {\n    const [theme, setTheme] = useState(\"light\");\n\n    const toggleTheme = () => {\n        if (theme === \"dark\") {\n            setTheme(\"light\");\n        } else {\n            setTheme(\"dark\");\n        }\n    };\n\n    useEffect(() => {\n        const localTheme = localStorage.getItem(\"theme\");\n        if (localTheme) {\n            setTheme(localTheme);\n        }\n    }, []);\n\n    return {\n        theme,\n        toggleTheme\n    };\n};\nexport function ComponentWithStore(Component: any) {\n    return connect(\n        state => {\n            return { ...state };\n        },\n        {\n            setUser: function(user: any) {\n                return {\n                    type: \"NEW_AUTHENTICATION\",\n                    user\n                };\n            }\n        }\n    )(Component);\n}\n","import React, { Component } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\n\nimport { Redirect } from \"react-router-dom\";\nimport { Dispatch } from \"redux\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\n// import Button from \"react-bootstrap/Button\";\n// import ButtonGroup from \"react-bootstrap/ButtonGroup\";\n// import ListGroup from \"react-bootstrap/ListGroup\";\n// import ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport { ComponentWithStore } from \"../ui\";\n\ntype ProfilePageProps = {\n    dispatch: Dispatch;\n};\n\nclass ProfilePage extends Component<ProfilePageProps> {\n    static propTypes = {\n        auth: PropTypes.shape({\n            scope: PropTypes.string,\n            access_token: PropTypes.string,\n            id_token: PropTypes.string,\n            refresh_token: PropTypes.string,\n            profile: PropTypes.shape({\n                preferred_username: PropTypes.string,\n                email: PropTypes.string,\n                jti: PropTypes.string,\n                acr: PropTypes.string,\n                name: PropTypes.string,\n                sub: PropTypes.string,\n                typ: PropTypes.string,\n                aud: PropTypes.string,\n                exp: PropTypes.string,\n                given_name: PropTypes.string,\n                family_name: PropTypes.string,\n                nbf: PropTypes.string,\n                azp: PropTypes.string,\n                session_state: PropTypes.string,\n                iss: PropTypes.string\n            })\n        })\n    };\n\n    static defaultProps: InferProps<typeof ProfilePage.propTypes> | any = {\n        auth: {\n            scope: null,\n            profile: null\n        }\n    };\n\n    render() {\n        const { auth }: any = this.props;\n        return (\n            <Container fluid=\"md\">\n                <Row>\n                    {auth.profile ? (\n                        <React.Fragment>\n                            <Col md={12}>\n                                <h1>Hello {auth.profile.preferred_username}</h1>\n                                <h2>Welcome to Fake NOM</h2>\n\n                                <hr />\n                            </Col>\n                            <Col md={4}>\n                                <Card\n                                    bg=\"success\"\n                                    text={\"white\"}\n                                    style={{ width: \"18rem\" }}\n                                >\n                                    <Card.Header>Access Token</Card.Header>\n                                    <Card.Body>\n                                        <Card.Title>\n                                            For usage with API\n\t\t\t\t\t\t\t\t\t\t</Card.Title>\n                                        <Card.Text>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                readOnly\n                                                value={auth.access_token}\n                                            />\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col md={4}>\n                                <Card\n                                    bg=\"warning\"\n                                    text={\"white\"}\n                                    style={{ width: \"18rem\" }}\n                                >\n                                    <Card.Header>Refresh Token</Card.Header>\n                                    <Card.Body>\n                                        <Card.Title>\n                                            For usage with API\n\t\t\t\t\t\t\t\t\t\t</Card.Title>\n                                        <Card.Text>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                readOnly\n                                                value={auth.refresh_token}\n                                            />\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col md={4}>\n                                <Card\n                                    bg=\"info\"\n                                    text={\"white\"}\n                                    style={{ width: \"18rem\" }}\n                                >\n                                    <Card.Header>Id Token</Card.Header>\n                                    <Card.Body>\n                                        <Card.Title>\n                                            For usage with API\n\t\t\t\t\t\t\t\t\t\t</Card.Title>\n                                        <Card.Text>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                readOnly\n                                                value={auth.id_token}\n                                            />\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col md={12}>\n                                <hr />\n                                <h3>Scopes Allowed:</h3>\n\n                                <strong>\n                                    <pre className=\"text-info\">\n                                        {auth.scope}\n                                    </pre>\n                                </strong>\n                            </Col>\n                            <Col md={12}>\n                                <hr />\n\n                                <h3>ID Token claims:</h3>\n\n                                <Form>\n                                    {Object.keys(auth.profile).map(\n                                        (key, index) => (\n                                            <Form.Group\n                                                as={Row}\n                                                key={key}\n                                                controlId={`form-control-${key}`}\n                                            >\n                                                <Form.Label column sm={2}>\n                                                    {key}\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        readOnly\n                                                        value={\n                                                            auth.profile[key]\n                                                        }\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n                                        )\n                                    )}\n                                </Form>\n                            </Col>\n                        </React.Fragment>\n                    ) : (\n                            <Redirect to=\"/login\" />\n                        )}\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default ComponentWithStore(ProfilePage);\n","import React, { ChangeEvent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\n\ninterface Props {\n    markdownContent: string;\n    setMarkdownContent: (value: string) => void;\n    theme: string;\n}\n\nconst Editor: React.FC<Props> = ({\n    markdownContent,\n    setMarkdownContent,\n    theme\n}) => {\n    return (\n        <Col id=\"editor\">\n            <Form.Control\n                as=\"textarea\"\n                rows={20}\n                onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n                    setMarkdownContent(e.target.value)\n                }\n                defaultValue={markdownContent}\n            />\n        </Col>\n    );\n};\n\nEditor.propTypes = {\n    markdownContent: PropTypes.string.isRequired,\n    setMarkdownContent: PropTypes.func.isRequired\n};\n\nexport default Editor;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport marked from \"marked\";\nimport Col from \"react-bootstrap/Col\";\n\ninterface Props {\n    markdownContent: string;\n    theme: string;\n}\n\nconst Preview: React.FC<Props> = ({ markdownContent, theme }) => {\n    const markdown = markdownContent || \"# Dummy\";\n    const mardownFormattedContent = marked(markdown);\n\n    return (\n        <Col id=\"preview\">\n            <h2>Preview</h2>\n            <div\n                dangerouslySetInnerHTML={{ __html: mardownFormattedContent }}\n            ></div>\n        </Col>\n    );\n};\n\nPreview.propTypes = {\n    markdownContent: PropTypes.string.isRequired\n};\n\nexport default Preview;\n","import React, { Component } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport Row from \"react-bootstrap/Row\";\n// import Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n// import ButtonGroup from \"react-bootstrap/ButtonGroup\";\n// import ListGroup from \"react-bootstrap/ListGroup\";\n// import ProgressBar from \"react-bootstrap/ProgressBar\";\n// import Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\n// import { ComponentWithStore } from \"../ui\";\nimport {\n    AuthProps\n    //, Scope\n} from \"../auth\";\nimport Editor from \"../components/Editor\";\nimport Preview from \"../components/Preview\";\n\nconst DEFAULT_MARKDOWN = `\n# H1\n## H2\n### H3\n#### H4\n##### H5\n\n__bold__\n**bold**\n_italic_\n`;\n\ntype Note =\n    | {\n        name: string;\n        markdown: string;\n        metadata: any;\n    }\n    | any;\n\ntype NoteManagerProps =\n    | {\n        auth: AuthProps | any;\n        note: Note | any;\n    }\n    | any;\ninterface NoteManagerActionProps {\n    saveNote: () => void;\n}\nclass NoteManager extends Component<NoteManagerProps, Note> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = { markdown: DEFAULT_MARKDOWN };\n    }\n    static propTypes = {\n        auth: PropTypes.shape({\n            access_token: PropTypes.string,\n            scope: PropTypes.string\n        }),\n        note: PropTypes.shape({\n            name: PropTypes.string,\n            markdown: PropTypes.string,\n            metadata: PropTypes.shape({\n                uri_id: PropTypes.string\n            })\n        })\n    };\n    static defaultProps:\n        | InferProps<typeof NoteManager.propTypes>\n        | NoteManagerProps\n        | NoteManagerActionProps\n        | any = {\n            note: {\n                name: \"First Note\",\n                markdownContent: DEFAULT_MARKDOWN,\n                metadata: { uri_id: \"https://data.cognod.es/johndoe/first-note\" }\n            }\n        };\n\n    componentDidMount() {\n        const { note }: any = this.props;\n\n        if (note && typeof note.markdown === \"string\") {\n            if (note.markdown !== this.state.markdown) {\n                this.setState({\n                    markdown: note.markdown\n                });\n            }\n        }\n    }\n    render() {\n        const {\n            // auth,\n            note,\n            saveNote\n        }: any = this.props;\n\n        const markdown = note.markdown || this.state.markdown;\n        return (\n            <Container fluid=\"md\">\n                <Row>\n                    <Editor\n                        theme=\"light\"\n                        markdownContent={markdown}\n                        setMarkdownContent={markdown => {\n                            this.setState({ markdown: markdown });\n                        }}\n                    />\n\n                    <Preview\n                        theme={\"light\"}\n                        markdownContent={this.state.markdown}\n                    />\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        <Button\n                            onClick={() => {\n                                saveNote({\n                                    ...note,\n                                    markdown: this.state.markdown\n                                });\n                            }}\n                        >\n                            Save\n\t\t\t\t\t\t</Button>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default connect<NoteManagerProps & NoteManagerActionProps>(\n    state => {\n        return { ...state, auth: {} };\n    },\n    {\n        saveNote: function(note: any) {\n            return {\n                type: \"SAVE_NOTE\",\n                note\n            };\n        }\n    }\n)(NoteManager);\n","export type AuthProps = {\n    scope: string | null;\n    access_token: string | null;\n    user: any | null;\n};\n\nexport function needs_login(auth: any) {\n    if (!auth) {\n        return true;\n    }\n    if (!auth.scope) {\n        return true;\n    }\n    return typeof auth.scope !== \"string\";\n}\n\nexport class Scope {\n    auth: AuthProps;\n    constructor(auth: AuthProps) {\n        this.auth = auth;\n    }\n    public matches(regex: RegExp): boolean {\n        return this.auth.scope.match(regex) !== null;\n    }\n    public canRead(): boolean {\n        return this.matches(/notes:read/);\n    }\n    public canWrite(): boolean {\n        return this.matches(/notes:write/);\n    }\n}\n","import React, { Component } from \"react\";\n// import PropTypes, { InferProps } from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport Container from \"react-bootstrap/Container\";\n// import * as toastr from \"toastr\";\nimport { Redirect } from \"react-router-dom\";\n// import { LinkContainer } from \"react-router-bootstrap\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { needs_login } from \"../auth\";\ntype LoginProps = {\n    setUser: any;\n};\ntype LoginState = {\n    user: any;\n};\n\nclass Login extends Component<LoginProps, LoginState> {\n    public login = () => {\n        // dummy login\n        this.props.setUser({\n            scope: \"notes:write notes:read\",\n            user: { email: \"johndoe@mail.cognod.es\" },\n            access_token: \"FAKETOKEN\",\n            profile: {\n                preferred_name: \"John Doe\"\n            }\n        });\n    };\n\n    render() {\n        const { auth }: any = this.props;\n        if (!needs_login(auth)) {\n            return <Redirect to=\"/\" />;\n        }\n        return (\n            <Container fluid=\"md\">\n                <Row>\n                    <Col md={12}>\n                        <Modal.Dialog>\n                            <Modal.Header>\n                                <Modal.Title>Login</Modal.Title>\n                            </Modal.Header>\n\n                            <Modal.Body>\n                                <p>\n                                    This is a dummy login for now, just click\n                                    login.\n\t\t\t\t\t\t\t\t</p>\n                            </Modal.Body>\n\n                            <Modal.Footer>\n                                <Button onClick={this.login} variant=\"success\">\n                                    Proceed\n\t\t\t\t\t\t\t\t</Button>\n                            </Modal.Footer>\n                        </Modal.Dialog>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default connect(\n    state => {\n        return { ...state };\n    },\n    {\n        setUser: function(user: any) {\n            return {\n                type: \"NEW_AUTHENTICATION\",\n                user\n            };\n        }\n    }\n)(Login);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport PropTypes, { InferProps } from \"prop-types\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { needs_login, AuthProps } from \"../auth\";\n// import { ComponentWithStore } from \"../ui\";\n\nconst LogoutPropTypes = {\n    logout: PropTypes.func,\n    auth: PropTypes.shape({\n        scope: PropTypes.string,\n        access_token: PropTypes.string,\n        id_token: PropTypes.string,\n        refresh_token: PropTypes.string,\n        profile: PropTypes.shape({\n            preferred_username: PropTypes.string\n        })\n    })\n};\n\ntype LogoutProps = AuthProps | InferProps<typeof LogoutPropTypes> | any;\n\nclass Logout extends Component<LogoutProps> {\n    static propTypes = LogoutPropTypes;\n\n    constructor(props: LogoutProps) {\n        super(props);\n        this.state = {};\n    }\n\n    public performLogout = () => {\n        this.props.logout();\n    };\n\n    render() {\n        const { auth } = this.props;\n        if (needs_login(auth)) {\n            return <Redirect to=\"/\" />;\n        }\n\n        return (\n            <Container fluid=\"md\">\n                <Row>\n                    <Col md={12}>\n                        <Modal.Dialog>\n                            <Modal.Header>\n                                <Modal.Title>\n                                    Do you really wish to logout?\n\t\t\t\t\t\t\t\t</Modal.Title>\n                            </Modal.Header>\n\n                            <Modal.Footer>\n                                <Button\n                                    onClick={this.performLogout}\n                                    variant=\"danger\"\n                                >\n                                    Logout\n\t\t\t\t\t\t\t\t</Button>\n                            </Modal.Footer>\n                        </Modal.Dialog>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\nexport default connect(\n    state => {\n        return { ...state };\n    },\n    {\n        logout: function() {\n            return {\n                type: \"LOGOUT\"\n            };\n        }\n    }\n)(Logout);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    Redirect\n} from \"react-router-dom\";\n/* import { NavLink } from \"react-router-dom\";*/\n// import { ComponentWithStore } from \"./ui\";\n\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport ProfilePage from \"./pages/home\";\nimport NoteManager from \"./pages/NoteManager\";\nimport Login from \"./pages/login\";\nimport Logout from \"./pages/logout\";\nimport { ComponentWithStore } from \"./ui\";\nimport { needs_login } from \"./auth\";\n\ntype AppState = {\n    user: any;\n    error: Error | null;\n};\ntype AppProps = {\n    auth: any;\n};\n\nclass App extends Component<AppProps, AppState> {\n    static propTypes = {\n        auth: PropTypes.object\n    };\n    render() {\n        const { auth } = this.props;\n\n        function AuthenticatedRoute({\n            children,\n            ...rest\n        }: {\n            [key: string]: any;\n        }) {\n            return (\n                <Route\n                    {...rest}\n                    render={({ location }) =>\n                        !needs_login(auth) ? (\n                            children\n                        ) : (\n                                <Redirect\n                                    to={{\n                                        pathname: \"/login\",\n                                        state: { from: location }\n                                    }}\n                                />\n                            )\n                    }\n                />\n            );\n        }\n\n        return (\n            <Router>\n                <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\" className=\"mb-3\">\n                    <LinkContainer to=\"/\">\n                        <Navbar.Brand>NoteQualia</Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls=\"notequalia-navbar-nav\" />\n\n                    <Navbar.Collapse\n                        className=\"justify-content-end\"\n                        id=\"notequalia-navbar-nav\"\n                    >\n                        <Nav>\n                            {needs_login(auth) ? (\n                                <LinkContainer to=\"/login\">\n                                    <Nav.Link>Login</Nav.Link>\n                                </LinkContainer>\n                            ) : (\n                                    <React.Fragment>\n                                        <LinkContainer to=\"/notes\">\n                                            <Nav.Link>Notes</Nav.Link>\n                                        </LinkContainer>\n\n                                        <Nav.Link href=\"/api\">Browse API</Nav.Link>\n\n                                        <LinkContainer to=\"/logout\">\n                                            <Nav.Link>Logout</Nav.Link>\n                                        </LinkContainer>\n                                        <LinkContainer to=\"/profile\">\n                                            <Nav.Link>Profile</Nav.Link>\n                                        </LinkContainer>\n                                    </React.Fragment>\n                                )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n                <Switch>\n                    <Route path=\"/login\">\n                        <Login />\n                    </Route>\n                    <Route path=\"/logout\">\n                        <Logout />\n                    </Route>\n                    <Route exact path=\"/\">\n                        <Redirect to=\"/notes\" />\n                    </Route>\n                    <AuthenticatedRoute path=\"/profile\">\n                        <ProfilePage />\n                    </AuthenticatedRoute>\n                    <AuthenticatedRoute path=\"/notes\">\n                        <NoteManager />\n                    </AuthenticatedRoute>\n                </Switch>\n            </Router>\n        );\n    }\n}\nexport default ComponentWithStore(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import jwt_decode from \"jwt-decode\";\n\nconst DEFAULT_STATE = {};\n\nexport const auth = (state: any = DEFAULT_STATE, action: any = {}) => {\n    switch (action.type) {\n        case \"NEW_AUTHENTICATION\":\n            const { user } = action;\n            const {\n                id_token,\n                access_token,\n                refresh_token,\n                scope,\n                profile\n            } = user;\n            return {\n                ...state,\n                scope,\n                profile,\n                id_token,\n                access_token,\n                refresh_token\n            };\n\n        case \"LOGOUT\":\n            return {\n                scope: null,\n                profile: null,\n                id_token: null,\n                access_token: null,\n                refresh_token: null\n            };\n        default:\n            return { ...state };\n    }\n};\n\nexport default auth;\n","// import jwt_decode from \"jwt-decode\";\n\nconst DEFAULT_STATE = {};\n\nexport const note = (state: any = DEFAULT_STATE, action: any = {}) => {\n    switch (action.type) {\n        case \"SAVE_NOTE\":\n            const { note } = action;\n            const { name, markdown } = note;\n            return {\n                ...state,\n                name,\n                markdown\n            };\n\n        default:\n            return { ...state };\n    }\n};\n\nexport default note;\n","export const templates = (state: any = {}, action: any = {}) => {\n    switch (action.type) {\n        case \"LOGOUT\":\n        case \"UNLOAD_TEMPLATES\":\n            return {};\n\n        case \"SET_TEMPLATES\":\n            return { ...state };\n\n        default:\n            return { ...state };\n    }\n};\n\nexport default templates;\n","import { createBrowserHistory } from \"history\";\nexport const history = createBrowserHistory();\n","import { combineReducers } from \"redux\";\nimport { compose } from \"redux\";\nimport { auth } from \"./auth\";\nimport { note } from \"./note\";\nimport { templates } from \"./templates\";\nimport { connectRouter } from \"connected-react-router\";\nimport { history } from \"../history\";\n\nconst DEFAULT_STATE = {};\n\nexport const mainReducer = (state: any = DEFAULT_STATE, action: any = {}) => {\n    switch (action.type) {\n        default:\n            return { ...state };\n    }\n};\n\nexport default compose(\n    mainReducer,\n    combineReducers({ auth, note, templates, router: connectRouter(history) })\n);\n","import { createStore, applyMiddleware, compose } from \"redux\";\n\nimport rootReducer from \"./reducers\";\nimport { save, load } from \"redux-localstorage-simple\";\n\nconst composeEnhancers =\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst loaded = load({ namespace: \"fakenom.state\" });\nconsole.log(\"loaded storage\", loaded);\nexport default createStore(\n    rootReducer,\n    loaded,\n    composeEnhancers(applyMiddleware(save({ namespace: \"fakenom.state\" })))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}